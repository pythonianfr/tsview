#!/usr/bin/env node

const fs = require('fs');
const parse = require('csv-parse/lib/sync');

function runElm(cmd){
    var app = require('tsformula_elm_parser.js')
        .Elm.FormulaParserValidation.Main.init({
            flags: cmd
        });
    app.ports.log.subscribe((x) => { console.log(x) });
}

require("yargs")
    .scriptName("tsformula-elm-parser")
    .usage('$0 <cmd> [args]')
    .env('TSFORMULA_ELM_PARSER')
    .option('spec', {
        alias: 's',
        demandOption: true,
        describe: 'JSON specification file',
        coerce: (x) => { return JSON.parse(fs.readFileSync(x)) }
    })
   .command(
        'check',
        'Check JSON specification',
        (_) => {},
        (args) => { runElm({cmd: 'Check', spec: args.spec}); }
    )
   .command(
        'inspect',
        'Inspect JSON specification',
        (yargs) => {
            yargs.option('all', {
                boolean: 'all',
                default: true,
                describe: 'Explore all possible return types'
            })
        },
        (args) => { runElm({cmd: 'Inspect', spec: args.spec, all: args.all}); }
    )
    .command(
        'parse [catalog]',
        'Parse formula CSV with name, code header',
        (yargs) => {
            yargs.positional('catalog', {
                type: 'string',
                describe: 'CSV formula catalog'
            })
        },
        (args) => {
            const records = parse(
                fs.readFileSync(args.catalog, 'utf8'),
                {columns: true, quote: "'"}
            );
            runElm({cmd: 'Parse', spec: args.spec, formulas: records});
        }
    )
    .help()
    .argv
